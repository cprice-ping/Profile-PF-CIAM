{
  "info": {
    "_postman_id": "d8f32c40-44b9-4c2a-8c6e-963a9904c854",
    "name": "PF Admin API - Configure Server",
    "description": "## Collection - PingFed Admin API\n\nThis set demonstrates the new APIs in PF 9.2+ that allow you do use the Admin API to fully build out a PingFed server that's connected to PingDirectory.\n\nIt is designed to be used with a DevOps Server Profile (https://github.com/cprice-ping/Profile-PF-Base), with the license either supplied by DevOps, or injected into the Docker container with a volume.\n\nThis set of calls:\n* Accepts EULA\n* Enables the Server Roles\n* Adds PingDirectory as a Data Store\n* Adds a LDAP Password Credential Validator\n* Adds IDP Adapters - Form \\ Form with LIP (SSPR) \\ PingID \\ ID-First\n* Adds an AuthN Policy with Contract (Extended Properties)\n* Adds a Local Identity Profile\n* Authentication API (ID-First & HTML Form with LIP)\n* Adds a SP Connection to HTTPBIN\n* Configures OAuth \\ OIDC\n* Adds a couple of OAuth clients\n\nThis collection is designed to be executed via a Newman container in the stack\n\n```\npf-config:\n    image: postman/newman\n    command: run https://www.getpostman.com/collections/2e0df14dcf26f1ddb39a -e postman_vars.json --insecure\n    volumes: \n      # An environment file should be injected into the image - this file should contain your specfic info and secrets\n      - ./postman_vars.json:/etc/newman/postman_vars.json\n    networks:\n      - pingnet-internal\n```\n      \n",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Check PF is Running",
      "item": [
        {
          "name": "Check if Server is up",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a7864a9-1358-402a-b81d-bcc6da8044ff",
                "exec": [
                  "// Checks to see if the server actually responded",
                  "// If not, run the call again (with the 30 sec delay)",
                  "postman.setNextRequest(\"Check if Server is up\");",
                  "",
                  "pm.test(\"Server is Up\", function () {",
                  "    pm.response.to.be.ok;",
                  "    postman.setNextRequest(\"00-Start-API-Calls\");",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f9e66381-07f9-487a-b8e4-f97b5521bef7",
                "exec": [
                  "// Puts a 30 sec delay into this call",
                  "setTimeout(function() {",
                  " console.log(\"Connecting to Server\");",
                  "}, 30000);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "49372564-a18e-4ced-9150-083ed9e5fe54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-XSRF-Header",
                "value": "pingfederate",
                "type": "text"
              }
            ],
            "url": "{{pfAdminURL}}/pf-admin-api/v1/license/agreement",
            "description": "Uses the API endpoint instead of just the heartbeat"
          },
          "response": []
        },
        {
          "name": "00-Start-API-Calls",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cd64bf84-50d5-4ada-aec9-ff1d52f0c5cb",
                "exec": [
                  "pm.test(\"Starting Collection\", function () {",
                  "    pm.response.to.be.status(302);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "cb2b102b-49d7-47b2-b08c-7b6096528d40",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "https://postman-echo.com"
          },
          "response": []
        }
      ],
      "_postman_id": "18a8c929-293b-40d3-8adc-e9809f196055",
      "description": "This folder contains the call that's used to wait until a desired condition is met.\n\nThe `Pre-request` of the call contains a log event with a timer of 30s. The `Test Script` of the call contains the loop back to this call, and the Condition test that will break the looping.\n\nThe name of the call for the break is `00-Start-API-Calls` -- it's a simple GET request to https://postman-echo.com and allows for this to be always consistent.\n\nThe actual set of API calls for this collection are started right after this GET call.",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "263d6b60-7de9-4ff9-850e-1838ee21a6a3",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "ba5aaee1-d75e-4fca-8667-8ff592b34ad4",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Accept EULA",
      "item": [
        {
          "name": "Accept EULA",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04f559ef-34fc-4ab3-9a8f-1b7fd36d993c",
                "exec": [
                  "pm.test(\"EULA Accepted\", function () {",
                  "    pm.response.to.be.ok;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "90b631d0-04d3-41d2-8e36-9a8810e45246",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "X-XSRF-Header",
                "value": "pingfederate",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"accepted\": true\n}"
            },
            "url": "{{pfAdminURL}}/pf-admin-api/v1/license/agreement"
          },
          "response": []
        }
      ],
      "_postman_id": "64491a04-b445-44f1-9869-dd20b6aa1f32"
    },
    {
      "name": "Configure Server",
      "item": [
        {
          "name": "Initial Server Config",
          "item": [
            {
              "name": "Get License",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dad3bd03-a53e-472d-96ae-5dc8c7f52a29",
                    "exec": [
                      "pm.test(\"PF License retrieved\", function () {",
                      "    pm.response.to.be.ok;",
                      "    ",
                      "    var response = pm.response.json();",
                      "    pm.environment.set(\"wsTrustEnabled\", response.wsTrustEnabled);    ",
                      "    pm.environment.set(\"oauthEnabled\", response.oauthEnabled);",
                      "    pm.environment.set(\"provisioningEnabled\", response.provisioningEnabled);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "bb62736f-e2c5-4d51-b4b0-a556cd961700",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "url": "{{pfAdminURL}}/pf-admin-api/v1/license",
                "description": "Used to configure Server Roles that match the license"
              },
              "response": []
            },
            {
              "name": "Server Settings",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "37cd23c7-5a5a-4834-bc81-9210b59a4074",
                    "exec": [
                      "pm.test(\"Server Settings Configured\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a400b408-df00-44e0-91c1-a96af12aaa85",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fbdea1c9-bb61-41dc-bf01-8d372de0d6c7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"contactInfo\": {\n    \"company\": \"PF Demo\"\n  },\n  \"rolesAndProtocols\": {\n    \"oauthRole\": {\n      \"enableOauth\": {{oauthEnabled}},\n      \"enableOpenIdConnect\": {{oauthEnabled}}\n    },\n    \"idpRole\": {\n      \"enable\": true,\n      \"saml20Profile\": {\n        \"enable\": true,\n        \"enableAutoConnect\": false\n      },\n      \"enableOutboundProvisioning\": {{provisioningEnabled}},\n      \"enableSaml11\": false,\n      \"enableSaml10\": false,\n      \"enableWsFed\": true,\n      \"enableWsTrust\": {{wsTrustEnabled}}\n    },\n    \"spRole\": {\n      \"enable\": true,\n      \"saml20Profile\": {\n        \"enable\": true,\n        \"enableXASP\": false,\n        \"enableAutoConnect\": false\n      },\n      \"enableSaml11\": false,\n      \"enableSaml10\": false,\n      \"enableWsFed\": false,\n      \"enableWsTrust\": false,\n      \"enableOpenIDConnect\": true,\n      \"enableInboundProvisioning\": false\n    },\n    \"enableIdpDiscovery\": false\n  },\n  \"federationInfo\": {\n    \"baseUrl\": \"{{pfBaseURL}}\",\n    \"saml2EntityId\": \"{{pfBaseURL}}\",\n    \"autoConnectEntityId\": \"{{pfBaseURL}}\",\n    \"saml1xIssuerId\": \"{{pfBaseURL}}\",\n    \"saml1xSourceId\": \"{{pfBaseURL}}\",\n    \"wsfedRealm\": \"{{pfBaseURL}}\"\n  }\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/serverSettings"
              },
              "response": []
            },
            {
              "name": "Add Signing Cert",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f99d64af-a643-4445-bcac-fe0d289c4817",
                    "exec": [
                      "pm.test(\"Signing Cert created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fd964aad-0b4f-40a0-9dae-eaa7070508c8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"signing-cert\",\n  \"commonName\": \"pingfederate\",\n  \"organization\": \"Ping Identity\",\n  \"country\": \"US\",\n  \"validDays\": \"1825\",\n  \"keyAlgorithm\": \"RSA\",\n  \"keySize\": \"2048\",\n  \"signatureAlgorithm\": \"SHA256withRSA\"\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/keyPairs/signing/generate"
              },
              "response": []
            },
            {
              "name": "Create Extended Propery",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b05293b-0945-4079-8094-f921b962ca35",
                    "exec": [
                      "pm.test(\"Extended Property Created\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a908c24a-1077-459e-ae43-893db3235b54",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"items\": [\n    {\n      \"name\": \"authNexp\",\n      \"description\": \"Authentication Experience\",\n      \"multiValued\": \"false\"\n    }\n  ]\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/extendedProperties"
              },
              "response": []
            },
            {
              "name": "Create Extended Property Selector",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2eeefba3-473e-41a4-91b7-85321fd28393",
                    "exec": [
                      "pm.test(\"Extended Property Selector Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9c2dd262-f40a-41e0-8fdd-c710e75692c8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n      \"id\": \"authnExp\",\n      \"name\": \"AuthN Experience\",\n      \"pluginDescriptorRef\": {\n        \"id\": \"com.pingidentity.pf.selectors.ExtendedPropertyAuthnSelector\"\n      },\n      \"configuration\": {\n        \"tables\": [],\n        \"fields\": [\n          {\n            \"name\": \"Extended Property\",\n            \"value\": \"authNexp\"\n          }\n        ]\n      },\n      \"attributeContract\": {\n        \"extendedAttributes\": [\n          {\n            \"name\": \"Basic\"\n          },\n          {\n            \"name\": \"Enhanced\"\n          },\n          {\n            \"name\": \"MFA\"\n          },\n          {\n            \"name\": \"Passwordless\"\n          } ]\n      }\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationSelectors"
              },
              "response": []
            },
            {
              "name": "Add `pingfederate` as Virtual Host Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d2d7a1be-be2d-4600-9bd3-d0bb12edd3ed",
                    "exec": [
                      "pm.test(\"Virtual Host Created\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3500525b-eba9-44dc-8cc5-9ad3cb1f68cd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"virtualHostNames\": [\n    \"pingfederate\"\n  ]\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/virtualHostNames",
                "description": "This is used to accept backchannel calls from other services in the stack"
              },
              "response": []
            }
          ],
          "_postman_id": "e2ae9616-4d84-4719-acc8-0ef9c659722e",
          "description": "This folder contains calls to do the initial configuration of the Server:\n\n* Match the Roles & Protocols to the installed license\n* Add a Signing Certificate\n* Add Extended Property & Selector (Used to direct AuthN Experience)\n* Add native admin (doesn't work in v10- -- Malibu wizard will be shown in UI)\n* Add Virtual Host for `pingfederate` to enable any backchannel calls",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db108d5-3306-43e1-b2bc-a7f632d2dc32",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f8c7d200-9864-40c6-9cea-6a7dc3ec2dc7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "IDP Config - DataStore \\ PCV \\ Adapter",
          "item": [
            {
              "name": "Add Datastore - PD",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7c855f38-dfee-4e47-b7d8-7e230cd38dd3",
                    "exec": [
                      "pm.test(\"PD Datastore Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3b0dc87c-1739-44cb-89ea-ba7406b431ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "    {\n      \"type\": \"LDAP\",\n      \"id\": \"LDAP-PingDirectory\",\n      \"maskAttributeValues\": false,\n      \"hostnames\": [\n        \"pingdirectory\"\n      ],\n      \"ldapType\": \"PING_DIRECTORY\",\n      \"bindAnonymously\": false,\n      \"userDN\": \"cn=pingfederate\",\n\t  \"password\": \"{{pingdirAdminPwd}}\",\n      \"useSsl\": false,\n      \"useDnsSrvRecords\": false,\n      \"name\": \"PingDirectory\",\n      \"testOnBorrow\": false,\n      \"testOnReturn\": false,\n      \"createIfNecessary\": true\n    }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/dataStores"
              },
              "response": []
            },
            {
              "name": "Add Password Credential Validator (LDAP - PD)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3a8cf566-6b2a-4887-ac6f-f7e702cb3476",
                    "exec": [
                      "pm.test(\"LDAP PCV Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ad9db93e-c32f-4065-a90b-1414f550ba8b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"PDPCV\",\n  \"name\": \"PD PCV\",\n  \"pluginDescriptorRef\": {\n  \"id\": \"org.sourceid.saml20.domain.LDAPUsernamePasswordCredentialValidator\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Authentication Error Overrides\",\n        \"rows\": []\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"LDAP Datastore\",\n        \"value\": \"LDAP-PingDirectory\"\n      },\n      {\n        \"name\": \"Search Base\",\n        \"value\": \"{{userBaseDN}}\"\n      },\n      {\n        \"name\": \"Search Filter\",\n        \"value\": \"(|(uid=${username})(mail=${username}))\"\n      },\n      {\n        \"name\": \"Scope of Search\",\n        \"value\": \"Subtree\"\n      },\n      {\n        \"name\": \"Case-Sensitive Matching\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Display Name Attribute\",\n        \"value\": \"displayName\"\n      },\n      {\n        \"name\": \"Mail Attribute\",\n        \"value\": \"mail\"\n      },\n      {\n        \"name\": \"SMS Attribute\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"PingID Username Attribute\",\n        \"value\": \"uid\"\n      },\n      {\n        \"name\": \"Mail Search Filter\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Username Attribute\",\n        \"value\": \"uid\"\n      },\n      {\n        \"name\": \"Mail Verified Attribute\",\n        \"value\": \"\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"mail\"\n      },\n      {\n        \"name\": \"givenName\"\n      },\n      {\n        \"name\": \"DN\"\n      },\n      {\n        \"name\": \"username\"\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\"\n      }\n    ]\n  }\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/passwordCredentialValidators"
              },
              "response": []
            },
            {
              "name": "Create Adapter - PingID",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      "var removeIllegalCharacters = function(input) {",
                      "    return input",
                      "        .replace(/=/g, '')",
                      "        .replace(/\\+/g, '-')",
                      "        .replace(/\\//g, '_');",
                      "};",
                      "",
                      "// Base64 Encoding function",
                      "var base64object = function(input) {",
                      "    ",
                      "    console.log(input);",
                      "    var inputWords = CryptoJS.enc.Utf8.parse(input);",
                      "    var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
                      "    var output = removeIllegalCharacters(base64);",
                      "    return output;",
                      "};",
                      "",
                      "var licenseBase64 = base64object(pm.environment.get('pingId'));",
                      "",
                      "pm.environment.set('encodedPingID', licenseBase64);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1e26e9c5-34dc-4319-94d4-f12ca92fd718",
                    "exec": [
                      "pm.test(\"PD Datastore Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "01640a7a-63f8-4fdc-89f9-7f38b297fb44",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "type": "text",
                    "value": "PingFederate"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "       {\n            \"id\": \"PingID\",\n            \"name\": \"PingID\",\n            \"pluginDescriptorRef\": {\n                \"id\": \"com.pingidentity.adapters.pingid.PingIDAdapter\"\n            },\n            \"configuration\": {\n        \"tables\": [],\n        \"fields\": [\n          {\n            \"name\": \"PingID Properties\",\n            \"value\": \"{{encodedPingID}}\"\n          },\n          {\n            \"name\": \"LDAP Data source\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Query Directory\",\n            \"value\": \"false\"\n          },\n          {\n            \"name\": \"Base Domain\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Filter\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"LDAP Search Scope\",\n            \"value\": \"3\"\n          },\n          {\n            \"name\": \"fname attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"lname attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"email attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"group attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"phone attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"YubiKey attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Secondary email attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Voice number attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"State attribute\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"PingID Heartbeat Timeout\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Authentication During Errors\",\n            \"value\": \"REJECT\"\n          },\n          {\n            \"name\": \"Users without a paired device\",\n            \"value\": \"block\"\n          },\n          {\n            \"name\": \"LDAP Data Source For Devices\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Create entry for devices\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Encryption Key For Devices\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"Distinguished Name Pattern\",\n            \"value\": \"\"\n          },\n          {\n            \"name\": \"HTML Template\",\n            \"value\": \"pingid.offline.auth.login.template.html\"\n          },\n          {\n            \"name\": \"Cookie Duration\",\n            \"value\": \"1\"\n          },\n          {\n            \"name\": \"PingID Properties File Name\",\n            \"value\": \"pingid.properties.1\"\n          },\n          {\n            \"name\": \"Refresh UserId Cookie\",\n            \"value\": \"false\"\n          },\n          {\n            \"name\": \"Require PingID Registration\",\n            \"value\": \"false\"\n          }\n        ]\n      },\n      \"attributeContract\": {\n        \"coreAttributes\": [\n          {\n            \"name\": \"org.sourceid.saml20.adapter.idp.authn.authnCtx\",\n            \"masked\": false,\n            \"pseudonym\": false\n          },\n          {\n            \"name\": \"pingid_state\",\n            \"masked\": false,\n            \"pseudonym\": false\n          },\n          {\n            \"name\": \"subject\",\n            \"masked\": false,\n            \"pseudonym\": true\n          }\n        ],\n        \"extendedAttributes\": [],\n        \"maskOgnlValues\": false\n      },\n      \"attributeMapping\": {\n        \"attributeSources\": [],\n        \"attributeContractFulfillment\": {\n          \"org.sourceid.saml20.adapter.idp.authn.authnCtx\": {\n            \"source\": {\n              \"type\": \"ADAPTER\"\n            },\n            \"value\": \"org.sourceid.saml20.adapter.idp.authn.authnCtx\"\n          },\n          \"pingid_state\": {\n            \"source\": {\n              \"type\": \"ADAPTER\"\n            },\n            \"value\": \"pingid_state\"\n          },\n          \"subject\": {\n            \"source\": {\n              \"type\": \"ADAPTER\"\n            },\n            \"value\": \"subject\"\n          }\n        },\n        \"issuanceCriteria\": {\n          \"conditionalCriteria\": []\n        }\n      }\n    }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters"
              },
              "response": []
            },
            {
              "name": "Create Adapter - HTML Form",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1e26e9c5-34dc-4319-94d4-f12ca92fd718",
                    "exec": [
                      "pm.test(\"HTML Form Adapter Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "81f019e4-dae2-48fa-b6df-5c9b7ffa8e33",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "       {\n            \"id\": \"HTMLForm\",\n            \"name\": \"HTML Form\",\n            \"pluginDescriptorRef\": {\n                \"id\": \"com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter\"\n            },\n            \"configuration\": {\n                \"tables\": [\n                    {\n                        \"name\": \"Credential Validators\",\n                        \"rows\": [\n                            {\n                                \"fields\": [\n                                    {\n                                        \"name\": \"Password Credential Validator Instance\",\n                                        \"value\": \"PDPCV\"\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ],\n                \"fields\": [\n                    {\n                        \"name\": \"Challenge Retries\",\n                        \"value\": \"3\"\n                    },\n                    {\n                        \"name\": \"Session State\",\n                        \"value\": \"None\"\n                    },\n                    {\n                        \"name\": \"Session Timeout\",\n                        \"value\": \"60\"\n                    },\n                    {\n                        \"name\": \"Session Max Timeout\",\n                        \"value\": \"480\"\n                    },\n                    {\n                        \"name\": \"Allow Password Changes\",\n                        \"value\": \"true\"\n                    },\n                    {\n                        \"name\": \"Password Management System\",\n                        \"value\": \"\"\n                    },\n                    {\n                        \"name\": \"Enable 'Remember My Username'\",\n                        \"value\": \"true\"\n                    },\n                    {\n                        \"name\": \"Enable 'This is My Device'\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Change Password Email Notification\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Show Password Expiring Warning\",\n                        \"value\": \"true\"\n                    },\n                    {\n                        \"name\": \"Password Reset Type\",\n                        \"value\": \"NONE\"\n                    },\n                    {\n                        \"name\": \"Account Unlock\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Local Identity Profile\",\n                        \"value\": \"\"\n                    },\n                    {\n                        \"name\": \"Enable Username Recovery\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Login Template\",\n                        \"value\": \"html.form.login.template.html\"\n                    },\n                    {\n                        \"name\": \"Logout Path\",\n                        \"value\": \"\"\n                    },\n                    {\n                        \"name\": \"Logout Redirect\",\n                        \"value\": \"\"\n                    },\n                    {\n                        \"name\": \"Logout Template\",\n                        \"value\": \"idp.logout.success.page.template.html\"\n                    },\n                    {\n                        \"name\": \"Change Password Template\",\n                        \"value\": \"html.form.change.password.template.html\"\n                    },\n                    {\n                        \"name\": \"Change Password Message Template\",\n                        \"value\": \"html.form.message.template.html\"\n                    },\n                    {\n                        \"name\": \"Password Management System Message Template\",\n                        \"value\": \"html.form.message.template.html\"\n                    },\n                    {\n                        \"name\": \"Change Password Email Template\",\n                        \"value\": \"message-template-end-user-password-change.html\"\n                    },\n                    {\n                        \"name\": \"Expiring Password Warning Template\",\n                        \"value\": \"html.form.password.expiring.notification.template.html\"\n                    },\n                    {\n                        \"name\": \"Threshold for Expiring Password Warning\",\n                        \"value\": \"7\"\n                    },\n                    {\n                        \"name\": \"Snooze Interval for Expiring Password Warning\",\n                        \"value\": \"24\"\n                    },\n                    {\n                        \"name\": \"Login Challenge Template\",\n                        \"value\": \"html.form.login.challenge.template.html\"\n                    },\n                    {\n                        \"name\": \"'Remember My Username' Lifetime\",\n                        \"value\": \"30\"\n                    },\n                    {\n                        \"name\": \"'This is My Device' Lifetime\",\n                        \"value\": \"30\"\n                    },\n                    {\n                        \"name\": \"Allow Username Edits During Chaining\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Track Authentication Time\",\n                        \"value\": \"true\"\n                    },\n                    {\n                        \"name\": \"Post-Password Change Re-Authentication Delay\",\n                        \"value\": \"0\"\n                    },\n                    {\n                        \"name\": \"Password Reset Username Template\",\n                        \"value\": \"forgot-password.html\"\n                    },\n                    {\n                        \"name\": \"Password Reset Code Template\",\n                        \"value\": \"forgot-password-resume.html\"\n                    },\n                    {\n                        \"name\": \"Password Reset Template\",\n                        \"value\": \"forgot-password-change.html\"\n                    },\n                    {\n                        \"name\": \"Password Reset Error Template\",\n                        \"value\": \"forgot-password-error.html\"\n                    },\n                    {\n                        \"name\": \"Password Reset Success Template\",\n                        \"value\": \"forgot-password-success.html\"\n                    },\n                    {\n                        \"name\": \"Account Unlock Template\",\n                        \"value\": \"account-unlock.html\"\n                    },\n                    {\n                        \"name\": \"OTP Length\",\n                        \"value\": \"8\"\n                    },\n                    {\n                        \"name\": \"OTP Time to Live\",\n                        \"value\": \"10\"\n                    },\n                    {\n                        \"name\": \"PingID Properties\",\n                        \"value\": \"{{encodedPingID}}\"\n                    },\n                    {\n                        \"name\": \"Require Verified Email\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"Username Recovery Template\",\n                        \"value\": \"username.recovery.template.html\"\n                    },\n                    {\n                        \"name\": \"Username Recovery Info Template\",\n                        \"value\": \"username.recovery.info.template.html\"\n                    },\n                    {\n                        \"name\": \"Username Recovery Email Template\",\n                        \"value\": \"message-template-username-recovery.html\"\n                    },\n                    {\n                        \"name\": \"CAPTCHA for Authentication\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"CAPTCHA for Password change\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"CAPTCHA for Password Reset\",\n                        \"value\": \"false\"\n                    },\n                    {\n                        \"name\": \"CAPTCHA for Username recovery\",\n                        \"value\": \"false\"\n                    }\n                ]\n            },\n            \"attributeContract\": {\n                \"coreAttributes\": [\n                    {\n                        \"name\": \"policy.action\",\n                        \"masked\": false,\n                        \"pseudonym\": false\n                    },\n                    {\n                        \"name\": \"username\",\n                        \"masked\": false,\n                        \"pseudonym\": true\n                    }\n                ],\n                \"extendedAttributes\": [\n                    {\n                        \"name\": \"entryUUID\",\n                        \"masked\": false,\n                        \"pseudonym\": false\n                    },\n                    {\n                        \"name\": \"mail\",\n                        \"masked\": false,\n                        \"pseudonym\": false\n                    }\n                ],\n                \"maskOgnlValues\": false\n            },\n            \"attributeMapping\": {\n                \"attributeSources\": [],\n                \"attributeContractFulfillment\": {\n                    \"entryUUID\": {\n                        \"source\": {\n                            \"type\": \"ADAPTER\"\n                        },\n                        \"value\": \"entryUUID\"\n                    },\n                    \"mail\": {\n                        \"source\": {\n                            \"type\": \"ADAPTER\"\n                        },\n                        \"value\": \"mail\"\n                    },\n                    \"policy.action\": {\n                        \"source\": {\n                            \"type\": \"ADAPTER\"\n                        },\n                        \"value\": \"policy.action\"\n                    },\n                    \"username\": {\n                        \"source\": {\n                            \"type\": \"ADAPTER\"\n                        },\n                        \"value\": \"username\"\n                    }\n                },\n                \"issuanceCriteria\": {\n                    \"conditionalCriteria\": []\n                }\n            }\n        }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters"
              },
              "response": []
            },
            {
              "name": "Create Adapter - Identifier First",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1e26e9c5-34dc-4319-94d4-f12ca92fd718",
                    "exec": [
                      "pm.test(\"HTML Form Adapter Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4915258b-eab8-43a7-8a6c-8bd722d644b7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "type": "text",
                    "value": "PingFederate"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"IDFirst\",\n  \"name\": \"ID-First\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.adapters.identifierfirst.idp.IdentifierFirstAdapter\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"Identifier Cookie Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Allow Cancelling Identifier Selection\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Maximum Identifiers Count\",\n        \"value\": \"5\"\n      },\n      {\n        \"name\": \"Identifier Selection Template\",\n        \"value\": \"identifier.first.template.html\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"subject\",\n        \"masked\": false,\n        \"pseudonym\": true\n      },\n      {\n        \"name\": \"domain\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"uid\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"mail\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [\n      {\n        \"type\": \"LDAP\",\n        \"dataStoreRef\": {\n          \"id\": \"LDAP-PingDirectory\"\n        },\n        \"id\": \"PD\",\n        \"description\": \"PD\",\n        \"baseDn\": \"{{userBaseDN}}\",\n        \"searchScope\": \"SUBTREE\",\n        \"searchFilter\": \"(|(uid=${subject} )(mail=$${subject}))\",\n        \"binaryAttributeSettings\": {},\n        \"memberOfNestedGroup\": false\n      }\n    ],\n    \"attributeContractFulfillment\": {\n      \"entryUUID\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"entryUUID\"\n      },\n      \"uid\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"uid\"\n      },\n      \"mail\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"mail\"\n      },\n      \"subject\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"subject\"\n      },\n      \"domain\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"domain\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters"
              },
              "response": []
            }
          ],
          "_postman_id": "e556918d-f585-41c2-81d0-898335fa9c0f",
          "description": "These calls do the initial IdP Configuration:\n\n* Create PD datastore\n* Create LDAP (PD) PCV\n* Add IDP Adapters:\n * HTML Form\n * HTML Form with LIP\n * PingID",
          "auth": {
            "type": "basic",
            "basic": {
              "password": "2FederateM0re",
              "username": "Administrator"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "603b6cc6-2419-4853-a9a2-bfe5d81e1d91",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "787babf8-a335-48f2-8221-7fe05e963476",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "IDP Config - AuthN Policy pre-work",
          "item": [
            {
              "name": "Create AuthN Policy Contracts",
              "item": [
                {
                  "name": "Create Default AuthN Policy Contract",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "4f14cf69-4857-4f29-b857-d41ad98f72a3",
                        "exec": [
                          "pm.test(\"Policy Contract (HTML) Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5ca45f57-a4ed-4ed0-8276-12c62600a1dd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "PingFederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "    {\n      \"id\": \"defaultPolicyContract\",\n      \"name\": \"Default Policy Contract\",\n      \"coreAttributes\": [\n        {\n          \"name\": \"subject\"\n        }\n      ],\n      \"extendedAttributes\": [\n        {\n          \"name\": \"entryUUID\"\n        },\n        {\n          \"name\": \"mail\"\n        }\n      ]\n    }"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicyContracts"
                  },
                  "response": []
                }
              ],
              "_postman_id": "665dcf21-7087-4a8c-9686-fe390c8f5b39",
              "description": "Different Contracts used to provide different AuthN ceremonies for the Application.\n\nAdd the appropriate Contract to the App Mapping to trigger a different ceremony",
              "_postman_isSubFolder": true
            },
            {
              "name": "Create Local Identity Profile",
              "item": [
                {
                  "name": "LIP - Default Identity Profile",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "4f14cf69-4857-4f29-b857-d41ad98f72a3",
                        "exec": [
                          "pm.test(\"Default LIP Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "d690eaad-dac2-453c-8fee-6be69b8f49fb",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "PingFederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n            \"id\": \"defaultIdentityProfile\",\n            \"name\": \"Default Identity Profile\",\n            \"apcId\": {\n                \"id\": \"defaultPolicyContract\"\n            },\n            \"authSources\": [\n                {\n                    \"source\": \"Facebook\",\n                    \"id\": \"facebook\"\n                },\n                {\n                    \"source\": \"QR Code\",\n                    \"id\": \"qrcode\"\n                }\n            ],\n            \"registrationEnabled\": false,\n            \"profileEnabled\": false\n        }"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/localIdentity/identityProfiles"
                  },
                  "response": []
                }
              ],
              "_postman_id": "b879300f-3506-4cae-8cdc-12c6757f95fb",
              "description": "Creates a Default LIP for use in the AuthN Policies.\n\nThe LIP is configured:\n\n* Registration is enabled\n* Profile Management is enabled\n\n* Basic Attributes\n** First Name\n** Last Name\n** Email Address\n\n* AuthN Providers\n** Facebook\n** Google\n** QR Code (PID SDK)",
              "_postman_isSubFolder": true
            },
            {
              "name": "Create Adapter - HTML Form with LIP",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1e26e9c5-34dc-4319-94d4-f12ca92fd718",
                    "exec": [
                      "pm.test(\"HTML Form Adapter Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7198e030-ebe4-4279-9f0a-cb2a594fd5ad",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"HTMLFormWithLIP\",\n  \"name\": \"HTML Form with LIP\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Credential Validators\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Password Credential Validator Instance\",\n                \"value\": \"PDPCV\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Challenge Retries\",\n        \"value\": \"3\"\n      },\n      {\n        \"name\": \"Session State\",\n        \"value\": \"None\"\n      },\n      {\n        \"name\": \"Session Timeout\",\n        \"value\": \"60\"\n      },\n      {\n        \"name\": \"Session Max Timeout\",\n        \"value\": \"480\"\n      },\n      {\n        \"name\": \"Allow Password Changes\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Password Management System\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Enable 'Remember My Username'\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Enable 'This is My Device'\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Change Password Email Notification\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Show Password Expiring Warning\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Password Reset Type\",\n        \"value\": \"PingID\"\n      },\n      {\n        \"name\": \"Password Reset Policy Contract\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Account Unlock\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Local Identity Profile\",\n        \"value\": \"defaultIdentityProfile\"\n      },\n      {\n        \"name\": \"Notification Publisher\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Enable Username Recovery\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Login Template\",\n        \"value\": \"html.form.login.template.html\"\n      },\n      {\n        \"name\": \"Logout Path\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Redirect\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Template\",\n        \"value\": \"idp.logout.success.page.template.html\"\n      },\n      {\n        \"name\": \"Change Password Template\",\n        \"value\": \"html.form.change.password.template.html\"\n      },\n      {\n        \"name\": \"Change Password Message Template\",\n        \"value\": \"html.form.message.template.html\"\n      },\n      {\n        \"name\": \"Password Management System Message Template\",\n        \"value\": \"html.form.message.template.html\"\n      },\n      {\n        \"name\": \"Change Password Email Template\",\n        \"value\": \"message-template-end-user-password-change.html\"\n      },\n      {\n        \"name\": \"Expiring Password Warning Template\",\n        \"value\": \"html.form.password.expiring.notification.template.html\"\n      },\n      {\n        \"name\": \"Threshold for Expiring Password Warning\",\n        \"value\": \"7\"\n      },\n      {\n        \"name\": \"Snooze Interval for Expiring Password Warning\",\n        \"value\": \"24\"\n      },\n      {\n        \"name\": \"Login Challenge Template\",\n        \"value\": \"html.form.login.challenge.template.html\"\n      },\n      {\n        \"name\": \"'Remember My Username' Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"'This is My Device' Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Allow Username Edits During Chaining\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Track Authentication Time\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Post-Password Change Re-Authentication Delay\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"Password Reset Username Template\",\n        \"value\": \"forgot-password.html\"\n      },\n      {\n        \"name\": \"Password Reset Code Template\",\n        \"value\": \"forgot-password-resume.html\"\n      },\n      {\n        \"name\": \"Password Reset Template\",\n        \"value\": \"forgot-password-change.html\"\n      },\n      {\n        \"name\": \"Password Reset Error Template\",\n        \"value\": \"forgot-password-error.html\"\n      },\n      {\n        \"name\": \"Password Reset Success Template\",\n        \"value\": \"forgot-password-success.html\"\n      },\n      {\n        \"name\": \"Account Unlock Template\",\n        \"value\": \"account-unlock.html\"\n      },\n      {\n        \"name\": \"OTP Length\",\n        \"value\": \"8\"\n      },\n      {\n        \"name\": \"OTP Time to Live\",\n        \"value\": \"10\"\n      },\n      {\n        \"name\": \"PingID Properties\",\n        \"value\": \"{{encodedPingID}}\"\n      },\n      {\n        \"name\": \"Require Verified Email\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Username Recovery Template\",\n        \"value\": \"username.recovery.template.html\"\n      },\n      {\n        \"name\": \"Username Recovery Info Template\",\n        \"value\": \"username.recovery.info.template.html\"\n      },\n      {\n        \"name\": \"Username Recovery Email Template\",\n        \"value\": \"message-template-username-recovery.html\"\n      },\n      {\n        \"name\": \"CAPTCHA for Authentication\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Password change\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Password Reset\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Username recovery\",\n        \"value\": \"false\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"policy.action\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"username\",\n        \"masked\": false,\n        \"pseudonym\": true\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"mail\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"entryUUID\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"entryUUID\"\n      },\n      \"mail\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"mail\"\n      },\n      \"policy.action\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"policy.action\"\n      },\n      \"username\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"username\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters"
              },
              "response": []
            },
            {
              "name": "Enable IdP AuthN Policies",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "18654f1f-702d-45d1-b2e2-4742a2253d2e",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4f14cf69-4857-4f29-b857-d41ad98f72a3",
                    "exec": [
                      "pm.test(\"IdP AuthN Policies Enabled\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "86adf6de-0d0a-49df-a9c0-eba767be9e49",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "PingFederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enableIdpAuthnSelection\": true,\n  \"enableSpAuthnSelection\": false\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/settings"
              },
              "response": []
            }
          ],
          "_postman_id": "abb1ca02-31a8-4a5b-bd24-c2b0bfd27efd",
          "description": "Calls to setup the things to be used in Policies and LIPs:\n\n* Create Default AuthN Policy Contract\n* Create Default Local Identity Profile\n* Create HTML Form Adapter with LIP",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0e967485-03db-4214-92f1-8b541d227115",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b3f4095a-64ed-43fb-afe1-d3ccef6d26b7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "IDP Config - AuthN API",
          "item": [
            {
              "name": "Create Default AuthN API Application",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71e3a37a-7c2c-4909-863f-7051ff79ec48",
                    "exec": [
                      "pm.test(\"AuthN API App Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a3cefefc-946d-48e4-a750-f46c6010f469",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"DefaultAuthNAPIApp\",\n  \"url\": \"{{pfBaseURL}}/pf-ws/authn/explorer\",\n  \"description\": \"\",\n  \"additionalAllowedOrigins\": [],\n  \"name\": \"Default AuthN API\"\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationApi/applications"
              },
              "response": []
            },
            {
              "name": "Enable AuthN API",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3648d99-119b-4ff6-be07-e4d62057f518",
                    "exec": [
                      "pm.test(\"AuthN API Enabled\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "65d84bd2-6d7c-46b7-ab81-8e4a54d5724e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"apiEnabled\": true,\n  \"defaultApplicationRef\": {\n    \"id\": \"DefaultAuthNAPIApp\"\n  },\n  \"enableApiDescriptions\": true\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationApi/settings"
              },
              "response": []
            }
          ],
          "_postman_id": "012230ad-01e0-4fae-987b-784de4dfea12",
          "description": "Configure the PF Authentication API",
          "_postman_isSubFolder": true
        },
        {
          "name": "IDP Config - Sessions",
          "item": [
            {
              "name": "Configure Sessions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae78acb7-6654-43cc-9828-4c069e43317b",
                    "exec": [
                      "pm.test(\"Global Session Policy added\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e726a7c7-f4ce-40ef-a2a4-0b942890174f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enableSessions\": true,\n  \"persistentSessions\": true,\n  \"idleTimeoutMins\": 60,\n  \"idleTimeoutDisplayUnit\": \"MINUTES\",\n  \"maxTimeoutMins\": 480,\n  \"maxTimeoutDisplayUnit\": \"MINUTES\"\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/session/authenticationSessionPolicies/global"
              },
              "response": []
            },
            {
              "name": "Add PingID Override",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eb041198-282f-4559-af0e-d81f1c1abc69",
                    "exec": [
                      "pm.test(\"PingID Session Override Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a64cba6e-fd58-4baf-90e3-dcaab247a0d6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "value": "pingfederate",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "    {\n      \"id\": \"PingIDSessionOverride\",\n      \"authenticationSource\": {\n        \"type\": \"IDP_ADAPTER\",\n        \"sourceRef\": {\n          \"id\": \"PingID\"\n        }\n      },\n      \"enableSessions\": false,\n      \"persistent\": false,\n      \"timeoutDisplayUnit\": \"MINUTES\",\n      \"authnContextSensitive\": false\n    }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/session/authenticationSessionPolicies"
              },
              "response": []
            }
          ],
          "_postman_id": "689e475a-d76e-453d-b9e1-4fcb5670451e",
          "description": "Calls to configure the Global Sessions\n* Enable Global Sessions\n* Override PingID Adapter",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "75e125d3-5120-4cb8-93f8-4a135b3b6b1d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a072850b-2fd3-4322-9702-015060284c4a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "OAuth Config - AS Settings",
          "item": [
            {
              "name": "Scope Management",
              "item": [
                {
                  "name": "Common OIDC Scopes",
                  "item": [
                    {
                      "name": "OIDC Scope - openid",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "d811d801-bc60-4dae-acfc-2718352313f9",
                            "exec": [
                              "pm.test(\"Scope (openid) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "7a576f97-e058-4225-8c91-0cb30a974e36",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "value": "pingfederate",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"openid\",\n  \"description\": \"Used to authenticated with OIDC\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "OIDC Scope - address",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "58ab8f47-2136-4bc6-b45f-f987aeaa2b92",
                            "exec": [
                              "pm.test(\"Scope (address) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "0db3d412-a8f9-4666-885c-60590ca14a6f",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"address\",\n  \"description\": \"Used to access your postal address\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "OIDC Scope - email",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1cd8f58d-2dc3-4cf3-88b8-d678390c12ca",
                            "exec": [
                              "pm.test(\"Scope (email) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "df0510b8-0226-41f1-88ac-7577278a60dd",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"email\",\n  \"description\": \"Used to access your email address\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "OIDC Scope - phone",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "1bc376ac-f0f6-41dc-a893-bf17e158fd8b",
                            "exec": [
                              "pm.test(\"Scope (phone) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "142eceb6-0e9f-465a-a700-e6304412e7b8",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"phone\",\n  \"description\": \"Used to access your phone number\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "OIDC Scope - profile",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "186cebf3-76f8-4a06-aaae-793276f77cbf",
                            "exec": [
                              "pm.test(\"Scope (profile) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "6597fd7a-a76b-4622-aa4d-23434bb79964",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"profile\",\n  \"description\": \"Used to access your profile\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "02c762e2-da34-42ec-9213-88d9629bd3f1",
                  "_postman_isSubFolder": true
                },
                {
                  "name": "Exclusive Scopes",
                  "item": [
                    {
                      "name": "Scope - PingDirectory REST API",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "e70d9490-f1fa-4ef6-8231-a3d86fe7520d",
                            "exec": [
                              "pm.test(\"Scope (pd:dir:access) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "86a4d272-4049-4725-b63e-87f60d0e6133",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"pd:dir:access\",\n  \"description\": \"Used to access the PingDirectory REST API\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "Scope - PingDirectory Consent API (User)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "fe6950df-b6ca-4b11-b357-0a560cd8ff02",
                            "exec": [
                              "pm.test(\"Scope (pd:consents:unpriv) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "d778ca6b-7aed-4a49-ac4b-b8765d1a4761",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "value": "pingfederate",
                            "type": "text"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json",
                            "type": "text"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"pd:consents:unpriv\",\n  \"description\": \"Used to access the PingDirectory Consent API (User)\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "Scope - PingDirectory Consent API (Admin)",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "13fbd049-2577-49a8-957a-232556eac771",
                            "exec": [
                              "pm.test(\"Scope (pd:consents:priv) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "660203c9-025e-4cd3-83a3-5987d7b0bd9c",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"pd:consents:priv\",\n  \"description\": \"Used to access the PingDirectory Consent API (Admin)\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "Scope - PingDirectory Delegated Admin",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "75912089-fa51-4c0b-85a9-d7907a66e68a",
                            "exec": [
                              "pm.test(\"Scope (pf:client:reg) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "b0984141-8a8b-4193-9b1d-9e8289f0cab5",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"urn:pingidentity:directory-delegated-admin\",\n  \"description\": \"Used to access the PD Delegated Admin app\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes"
                      },
                      "response": []
                    },
                    {
                      "name": "Scope - PingFederate Client Registration",
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "id": "75912089-fa51-4c0b-85a9-d7907a66e68a",
                            "exec": [
                              "pm.test(\"Scope (pf:client:reg) Created\", function () {",
                              "    pm.response.to.have.status(\"Created\");",
                              "});"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "_postman_id": "82833581-80dc-4436-9abb-2d1a35a2d425",
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      },
                      "request": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "X-XSRF-Header",
                            "type": "text",
                            "value": "pingfederate"
                          },
                          {
                            "key": "Content-Type",
                            "type": "text",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"name\": \"pf:client:reg\",\n  \"description\": \"Used to dynamically register clients (RFC 7591)\",\n  \"dynamic\": \"false\"\n}"
                        },
                        "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes"
                      },
                      "response": []
                    }
                  ],
                  "_postman_id": "cc07370b-a0a2-4ea9-b117-968f4e88fdba",
                  "description": "Added Exclusive scopes used by Ping integrations\n\n* PingDirectory REST API\n* Consent API\n** Unpriviledged\n** Priviledged\n* Delegated Admin App\n* PingAccess Admin SSO (??)",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "b1f49a86-b5a4-4fbb-92cd-b11407439496",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "7a9e0dd1-d869-4b1e-a587-85725582d8e5",
                        "type": "text/javascript",
                        "exec": [
                          ""
                        ]
                      }
                    }
                  ],
                  "_postman_isSubFolder": true
                }
              ],
              "_postman_id": "37997d04-3ef1-4805-b44e-4eb6666f459e",
              "description": "Creates a base set of scopes for OIDC and Ping integrations",
              "_postman_isSubFolder": true
            },
            {
              "name": "Grant Mapping",
              "item": [
                {
                  "name": "Create APC mapping - Default Policy Contract",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "736f229e-688f-4dcf-b4bb-641f6c1e7dde",
                        "exec": [
                          "pm.test(\"Grant Mapping Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "bde0c544-2916-4d07-92e7-9b8db200eac3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "pingfederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "    {\n      \"attributeSources\": [],\n      \"attributeContractFulfillment\": {\n        \"USER_NAME\": {\n          \"source\": {\n            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n          },\n          \"value\": \"mail\"\n        },\n        \"USER_KEY\": {\n          \"source\": {\n            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n          },\n          \"value\": \"entryUUID\"\n        }\n      },\n      \"issuanceCriteria\": {\n        \"conditionalCriteria\": []\n      },\n      \"authenticationPolicyContractRef\": {\n        \"id\": \"defaultPolicyContract\"\n      }\n    }"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authenticationPolicyContractMappings"
                  },
                  "response": []
                }
              ],
              "_postman_id": "cef895bd-7729-4d5d-9bc5-c3189d5cc374",
              "description": "Configuration of Grant Management\n\n* Default AuthN Policy Contract",
              "_postman_isSubFolder": true
            },
            {
              "name": "Token Managers",
              "item": [
                {
                  "name": "Create JWT Token Manager",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "3639a176-e3c5-4e1f-babc-d998991cfe6b",
                        "exec": [
                          "pm.test(\"Access Token Manager (JWT) Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3acae614-6c1c-44b2-89c7-9ee72255a866",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "pingfederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"jwtDefault\",\n  \"name\": \"JWT-Default\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Symmetric Keys\",\n        \"rows\": []\n      },\n      {\n        \"name\": \"Certificates\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Key ID\",\n                \"value\": \"cert\"\n              },\n              {\n                \"name\": \"Certificate\",\n                \"value\": \"signing-cert\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Token Lifetime\",\n        \"value\": \"120\"\n      },\n      {\n        \"name\": \"JWS Algorithm\",\n        \"value\": \"RS256\"\n      },\n      {\n        \"name\": \"Active Symmetric Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Signing Certificate Key ID\",\n        \"value\": \"cert\"\n      },\n      {\n        \"name\": \"JWE Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWE Content Encryption Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Symmetric Encryption Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption Key\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption JWKS URL\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Include Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Default JWKS URL Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Include JWE Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include JWE X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Client ID Claim Name\",\n        \"value\": \"client_id\"\n      },\n      {\n        \"name\": \"Scope Claim Name\",\n        \"value\": \"scope\"\n      },\n      {\n        \"name\": \"Space Delimit Scope Values\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Issuer Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Audience Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWT ID Claim Length\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"Access Grant GUID Claim Name\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Path\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Publish Key ID X.509 URL\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Publish Thumbprint X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Expand Scope Groups\",\n        \"value\": \"false\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"sub\"\n      }\n    ]\n  },\n  \"selectionSettings\": {\n    \"resourceUris\": []\n  },\n  \"accessControlSettings\": {\n    \"restrictClients\": false,\n    \"allowedClients\": []\n  },\n  \"sessionValidationSettings\": {\n    \"checkValidAuthnSession\": false,\n    \"checkSessionRevocationStatus\": false,\n    \"updateAuthnSessionActivity\": false\n  }\n}"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/accessTokenManagers"
                  },
                  "response": []
                }
              ],
              "_postman_id": "e75b5ca0-5cdc-45f2-87b7-d8ffaec848c8",
              "description": "Configures the OAuth Token Mapping settings\n\n* Adds Default JWT Token Manager (Symmetric Key)\n* Adds AuthN Policy Contract Mapping",
              "_postman_isSubFolder": true
            },
            {
              "name": "Token Mappings",
              "item": [
                {
                  "name": "Create JWT Token Mapping to AuthN Policy Contract",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2b96e74c-7011-49d6-add6-37c1a46ed2c6",
                        "exec": [
                          "pm.test(\"Access Token Mapping Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "ae83e160-13fd-4fef-81f0-bd8816453e2f",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "pingfederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"context\": {\n    \"type\": \"AUTHENTICATION_POLICY_CONTRACT\",\n    \"contextRef\": {\n      \"id\": \"defaultPolicyContract\"\n    }\n  },\n  \"accessTokenManagerRef\": {\n    \"id\": \"jwtDefault\"\n  },\n  \"attributeContractFulfillment\": {\n    \"sub\": {\n      \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n      },\n      \"value\": \"entryUUID\"\n    }\n  }\n}"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/accessTokenMappings"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7575c61f-3160-4d0e-ac81-9b1616640075",
              "_postman_isSubFolder": true
            },
            {
              "name": "OIDC Policy",
              "item": [
                {
                  "name": "Create OIDC Policy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "4aa206d6-cc0b-49c2-83a2-ddfdd4de1b6b",
                        "exec": [
                          "pm.test(\"OIDC Policy Created\", function () {",
                          "    pm.response.have.status(201);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "55084402-9073-4605-ba54-1510714c5910",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "X-XSRF-Header",
                        "type": "text",
                        "value": "pingdfederate"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "    {\n      \"id\": \"OIDCPolicyDefault\",\n      \"name\": \"Default OIDC Policy\",\n      \"idTokenLifetime\": 5,\n      \"attributeContract\": {\n        \"coreAttributes\": [\n          {\n            \"name\": \"sub\"\n          }\n        ],\n        \"extendedAttributes\": []\n      },\n      \"attributeMapping\": {\n        \"attributeSources\": [],\n        \"attributeContractFulfillment\": {\n          \"sub\": {\n            \"source\": {\n              \"type\": \"TOKEN\"\n            },\n            \"value\": \"sub\"\n          }\n        },\n        \"issuanceCriteria\": {\n          \"conditionalCriteria\": []\n        }\n      },\n      \"includeSriInIdToken\": false,\n      \"includeUserInfoInIdToken\": false,\n      \"includeSHashInIdToken\": false,\n      \"accessTokenManagerRef\": {\n        \"id\": \"jwtDefault\"\n    }\n}"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/openIdConnect/policies"
                  },
                  "response": []
                }
              ],
              "_postman_id": "9a672a20-12f5-410d-810b-a96e69dc7d84",
              "description": "Creates a basic OIDC Policy.\n\nContains only the `sub` claim",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "8b3b3ef2-5114-4093-954e-21ad2faea31b",
          "description": "This folder contains calls to configure the AS Server:\n\n**Scope Management**\n* Default OIDC Scopes\n* Exclusive Ping App scopes\n\n**Grant Mapping**\n* Default AuthN Policy Contract Mapping\n\n**Access Tokens**\n* JWT Access Token Manager\n* Default AuthN Policy Contract Mapping\n",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8850f13f-df87-4530-b114-0686c9ccd5c8",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "688e1869-1e7f-43e7-9554-57942c2a89e2",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "853f49ad-5616-468f-9e4f-4870151c3ef2",
      "description": "This set of calls can be used to fully configure a new PF server\n\nThe following components will be created:  \n\nDatastore:\n* PingDirectory PCV\n\nIdP Adapters:\n* HTML Form\n* HTML Form with LIP\n* PingID\n* ID-First\n\nIdP AuthN Policy Contract\n\nIdP Authentication Policy:\n* Extended Properties Selector\n * Basic:  HTML Form --> Policy Contract\n * Enhanced:  HTML Form with LIP --> Policy Contract\n * MFA: HTML Form with LIP --> PingID --> Policy Contract\n * Passwordless: ID-First --> PingID\n \n* Authentication API\n * ID-First --> HTML Form with LIP --> PF API Explorer\n\nIDP Sessions:\n* Global Sessions: **Enabled**\n* Overrides: PingID Adapter\n\nSP Connection:\n* Dummy-SAML (HTTPBIN)\n\nOAuth Scopes:\n* Common - Default OIDC\n* Exclusive - Ping integrations (Delegator \\ ConsentAPI \\ DirAPI)\n\nToken Mapping:\n* AuthN Policy Contract\n\nToken Manager:\n* Default JWT (Certificate)\n\nToken Mapping:\n* AuthN Policy Contract --> Default JWT\n\nOAuth Clients:\n* `PingLogon` -- OIDC AuthZ Code \\ Implicit\n* `PingIntrospect` -- Introspect \\ Validation \n\nVirtual Host:\n* `pingfederate`",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "0c4b05a3-3dfe-4295-ab65-f55c3865a543",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4fa48226-005d-4976-8b39-27ad1faecb14",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Inital Use Cases",
      "item": [
        {
          "name": "Create Default AuthN Policy",
          "item": [
            {
              "name": "Create Default Policy",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "43c897b9-d3ca-403f-83f8-ae397e06abd4",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7cbf9465-6740-4dd7-a6f1-89e0dbeefc48",
                    "exec": [
                      "pm.test(\"Default AuthN Policy Created\", function () {",
                      "    pm.response.to.be.ok;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7a7ad4df-b686-49ac-bb72-c6f1380feb82",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "type": "text",
                    "value": "PingFederate"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"failIfNoSelection\": false,\n  \"authnSelectionTrees\": [\n    {\n      \"rootNode\": {\n        \"action\": {\n          \"type\": \"AUTHN_SELECTOR\",\n          \"authenticationSelectorRef\": {\n            \"id\": \"authnExp\"\n          }\n        },\n        \"children\": [\n          {\n            \"action\": {\n              \"type\": \"AUTHN_SOURCE\",\n              \"context\": \"Basic\",\n              \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                  \"id\": \"HTMLForm\"\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"APC_MAPPING\",\n                  \"context\": \"Success\",\n                  \"authenticationPolicyContractRef\": {\n                    \"id\": \"defaultPolicyContract\"\n                  },\n                  \"attributeMapping\": {\n                    \"attributeSources\": [],\n                    \"attributeContractFulfillment\": {\n                      \"entryUUID\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLForm\"\n                        },\n                        \"value\": \"entryUUID\"\n                      },\n                      \"mail\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLForm\"\n                        },\n                        \"value\": \"mail\"\n                      },\n                      \"subject\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLForm\"\n                        },\n                        \"value\": \"username\"\n                      }\n                    },\n                    \"issuanceCriteria\": {\n                      \"conditionalCriteria\": []\n                    }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"action\": {\n              \"type\": \"AUTHN_SOURCE\",\n              \"context\": \"Enhanced\",\n              \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                  \"id\": \"HTMLFormWithLIP\"\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"LOCAL_IDENTITY_MAPPING\",\n                  \"context\": \"Success\",\n                  \"localIdentityRef\": {\n                    \"id\": \"defaultIdentityProfile\"\n                  },\n                  \"outboundAttributeMapping\": {\n                    \"attributeSources\": [],\n                    \"attributeContractFulfillment\": {\n                      \"entryUUID\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"entryUUID\"\n                      },\n                      \"mail\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"mail\"\n                      },\n                      \"subject\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"username\"\n                      }\n                    },\n                    \"issuanceCriteria\": {\n                      \"conditionalCriteria\": []\n                    }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"action\": {\n              \"type\": \"AUTHN_SOURCE\",\n              \"context\": \"MFA\",\n              \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                  \"id\": \"HTMLFormWithLIP\"\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"AUTHN_SOURCE\",\n                  \"context\": \"Success\",\n                  \"authenticationSource\": {\n                    \"type\": \"IDP_ADAPTER\",\n                    \"sourceRef\": {\n                      \"id\": \"PingID\"\n                    }\n                  },\n                  \"inputUserIdMapping\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"HTMLFormWithLIP\"\n                    },\n                    \"value\": \"username\"\n                  }\n                },\n                \"children\": [\n                  {\n                    \"action\": {\n                      \"type\": \"DONE\",\n                      \"context\": \"Fail\"\n                    }\n                  },\n                  {\n                    \"action\": {\n                      \"type\": \"LOCAL_IDENTITY_MAPPING\",\n                      \"context\": \"Success\",\n                      \"localIdentityRef\": {\n                        \"id\": \"defaultIdentityProfile\"\n                      },\n                      \"outboundAttributeMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                          \"entryUUID\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"HTMLFormWithLIP\"\n                            },\n                            \"value\": \"entryUUID\"\n                          },\n                          \"mail\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"HTMLFormWithLIP\"\n                            },\n                            \"value\": \"mail\"\n                          },\n                          \"subject\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"HTMLFormWithLIP\"\n                            },\n                            \"value\": \"username\"\n                          }\n                        },\n                        \"issuanceCriteria\": {\n                          \"conditionalCriteria\": []\n                        }\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"action\": {\n              \"type\": \"AUTHN_SOURCE\",\n              \"context\": \"Passwordless\",\n              \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                  \"id\": \"IDFirst\"\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"AUTHN_SOURCE\",\n                  \"context\": \"Success\",\n                  \"authenticationSource\": {\n                    \"type\": \"IDP_ADAPTER\",\n                    \"sourceRef\": {\n                      \"id\": \"PingID\"\n                    }\n                  },\n                  \"inputUserIdMapping\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"IDFirst\"\n                    },\n                    \"value\": \"uid\"\n                  }\n                },\n                \"children\": [\n                  {\n                    \"action\": {\n                      \"type\": \"DONE\",\n                      \"context\": \"Fail\"\n                    }\n                  },\n                  {\n                    \"action\": {\n                      \"type\": \"APC_MAPPING\",\n                      \"context\": \"Success\",\n                      \"authenticationPolicyContractRef\": {\n                        \"id\": \"defaultPolicyContract\"\n                      },\n                      \"attributeMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                          \"entryUUID\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"IDFirst\"\n                            },\n                            \"value\": \"entryUUID\"\n                          },\n                          \"mail\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"IDFirst\"\n                            },\n                            \"value\": \"mail\"\n                          },\n                          \"subject\": {\n                            \"source\": {\n                              \"type\": \"ADAPTER\",\n                              \"id\": \"IDFirst\"\n                            },\n                            \"value\": \"subject\"\n                          }\n                        },\n                        \"issuanceCriteria\": {\n                          \"conditionalCriteria\": []\n                        }\n                      }\n                    }\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      \"name\": \"Default AuthN Policy\",\n      \"enabled\": true\n    },\n    {\n      \"rootNode\": {\n        \"action\": {\n          \"type\": \"AUTHN_SOURCE\",\n          \"authenticationSource\": {\n            \"type\": \"IDP_ADAPTER\",\n            \"sourceRef\": {\n              \"id\": \"IDFirst\"\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"action\": {\n              \"type\": \"DONE\",\n              \"context\": \"Fail\"\n            }\n          },\n          {\n            \"action\": {\n              \"type\": \"AUTHN_SOURCE\",\n              \"context\": \"Success\",\n              \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                  \"id\": \"HTMLFormWithLIP\"\n                }\n              },\n              \"inputUserIdMapping\": {\n                \"source\": {\n                  \"type\": \"ADAPTER\",\n                  \"id\": \"IDFirst\"\n                },\n                \"value\": \"subject\"\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"LOCAL_IDENTITY_MAPPING\",\n                  \"context\": \"Success\",\n                  \"localIdentityRef\": {\n                    \"id\": \"defaultIdentityProfile\"\n                  },\n                  \"outboundAttributeMapping\": {\n                    \"attributeSources\": [],\n                    \"attributeContractFulfillment\": {\n                      \"entryUUID\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"entryUUID\"\n                      },\n                      \"mail\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"mail\"\n                      },\n                      \"subject\": {\n                        \"source\": {\n                          \"type\": \"ADAPTER\",\n                          \"id\": \"HTMLFormWithLIP\"\n                        },\n                        \"value\": \"username\"\n                      }\n                    },\n                    \"issuanceCriteria\": {\n                      \"conditionalCriteria\": []\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        ]\n      },\n      \"name\": \"Default AuthN API\",\n      \"enabled\": true,\n      \"authenticationApiApplicationRef\": {\n        \"id\": \"DefaultAuthNAPIApp\"\n      }\n    }\n  ],\n  \"defaultAuthenticationSources\": [],\n  \"trackedHttpParameters\": []\n}"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/default"
              },
              "response": []
            }
          ],
          "_postman_id": "2b497726-fab8-4160-ab2e-b0aa04fbc193",
          "description": "Creates a set of Authentication experiences:\n\n* Basic (HTML Form) \n* Enhanced (HTML Form with LIP)\n* MFA (Enhanced --> PingID) \n\nAn Extended Property Selector determines which path. You can configure the Application (SP Connection \\ OAuth client) on the `Extended Properties` tab with the following values:\n\n* Basic\n* Enhanced\n* MFA\n\nPF Admin API treats all the Policies as belonging to `default` and there's no way to add new Policy Trees directly.\n\nSince we've pre-built all the Adapters \\ Policy Contracts - this uses a single call to pre-built the Policies as well\n\n",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a702892d-b8ae-412d-ac69-12d3f2362794",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "35a6dd7c-7d9d-4a5a-bf8a-0e60ffcc445a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "name": "Create SP Connections",
          "item": [
            {
              "name": "SAML - HTTPBIN",
              "item": [
                {
                  "name": "Add SP Connection",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1dcbdc33-6fe7-4b12-a87c-333eb87390d6",
                        "exec": [
                          "pm.test(\"SAML SP Connection Created\", function () {",
                          "    pm.response.to.have.status(\"Created\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8e3bb9f8-b67d-4a8e-a1c5-446c4678b2fd",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "X-XSRF-Header",
                        "value": "pingfederate",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "name": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\t\t\"id\": \"Dummy-SAML\",\n            \"type\": \"SP\",\n            \"name\": \"Dummy SAML (HTTPBIN)\",\n            \"entityId\": \"Dummy-SAML\",\n            \"active\": true,\n            \"contactInfo\": {},\n            \"loggingMode\": \"STANDARD\",\n            \"virtualEntityIds\": [],\n            \"licenseConnectionGroup\": \"\",\n            \"credentials\": {\n                \"certs\": [],\n                \"signingSettings\": {\n                    \"signingKeyPairRef\": {\n                        \"id\": \"signing-cert\"\n                    },\n                    \"includeCertInSignature\": false,\n                    \"includeRawKeyInSignature\": false,\n                    \"algorithm\": \"SHA256withRSA\"\n                }\n            },\n            \"extendedProperties\": {\n        \t\t\"authNexp\": {\n\t        \t\t\"values\": [\n\t            \t\t\"Basic\"\n\t\t        ]\n\t\t      }\n\t\t    },\n            \"spBrowserSso\": {\n                \"protocol\": \"SAML20\",\n                \"enabledProfiles\": [\n                    \"IDP_INITIATED_SSO\"\n                ],\n                \"ssoServiceEndpoints\": [\n                    {\n                        \"binding\": \"POST\",\n                        \"url\": \"https://httpbin.org/anything\",\n                        \"isDefault\": true,\n                        \"index\": 0\n                    }\n                ],\n                \"signAssertions\": false,\n                \"signResponseAsRequired\": true,\n                \"spSamlIdentityMapping\": \"STANDARD\",\n                \"requireSignedAuthnRequests\": false,\n                \"assertionLifetime\": {\n                    \"minutesBefore\": 5,\n                    \"minutesAfter\": 5\n                },\n                \"encryptionPolicy\": {\n                    \"encryptAssertion\": false,\n                    \"encryptSloSubjectNameId\": false,\n                    \"sloSubjectNameIDEncrypted\": false,\n                    \"encryptedAttributes\": []\n                },\n                \"attributeContract\": {\n                    \"coreAttributes\": [\n                        {\n                            \"name\": \"SAML_SUBJECT\",\n                            \"nameFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n                        }\n                    ],\n                    \"extendedAttributes\": []\n                },\n                \"adapterMappings\": [],\n                \"authenticationPolicyContractAssertionMappings\": [\n                    {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"SAML_SUBJECT\": {\n                                \"source\": {\n                                    \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n                                },\n                                \"value\": \"entryUUID\"\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        },\n                        \"authenticationPolicyContractRef\": {\n                            \"id\": \"defaultPolicyContract\"\n                        },\n                        \"restrictVirtualEntityIds\": false,\n                        \"restrictedVirtualEntityIds\": [],\n                        \"abortSsoTransactionAsFailSafe\": false\n                    }\n                ]\n            }\n        }"
                    },
                    "url": "{{pfAdminURL}}/pf-admin-api/v1/idp/spConnections",
                    "description": "Dummy SP Connection -- sends you to https://httpbin.org/anything"
                  },
                  "response": []
                }
              ],
              "_postman_id": "7ea6a756-5f27-415f-8aa2-6ba2abaff62f",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "69b139ef-1043-4efd-b4ca-309158b224fe",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "7e1245ce-0dae-4419-8873-10970ee051c4",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "f8e5c769-ae6d-4b29-9b71-0a336b8864b1",
          "description": "Create SP Connection that does an Authentication --> SAML Assertion to https://httpsbin.org/anything ",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create OIDC Clients",
          "item": [
            {
              "name": "Create OIDC Client (PingLogon)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41847d1c-9c1e-4b88-b671-c997621406f0",
                    "exec": [
                      "pm.test(\"OIDC Client - PingLogon Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "bdd7e744-742e-49a1-bafd-b75ecf0c0352",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "type": "text",
                    "value": "pingfederate"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n      \"clientId\": \"PingLogon\",\n      \"enabled\": true,\n      \"redirectUris\": [\n        \"https://change.me\",\n        \"https://*/delegator/*\"\n      ],\n      \"grantTypes\": [\n        \"IMPLICIT\",\n        \"AUTHORIZATION_CODE\"\n      ],\n      \"name\": \"Ping Logon\",\n      \"description\": \"This client is used to perform OIDC logons to Ping products:\\nPA Admin\\nDelegated Admin\\nConsent \\\\ DirAPI\\nDG (Symphonic)\",\n      \"logoUrl\": \"\",\n      \"refreshRolling\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationTime\": 0,\n      \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n      \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n      \"persistentGrantIdleTimeout\": 0,\n      \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n      \"bypassApprovalPage\": true,\n      \"restrictScopes\": false,\n      \"restrictedScopes\": [],\n      \"exclusiveScopes\": [\n        \"pd:consents:priv\",\n        \"pd:consents:unpriv\",\n        \"pd:dir:access\",\n        \"urn:pingidentity:directory-delegated-admin\"\n      ],\n      \"restrictedResponseTypes\": [],\n      \"defaultAccessTokenManagerRef\": {\n        \"id\": \"jwtDefault\"\n      },\n      \"validateUsingAllEligibleAtms\": false,\n      \"oidcPolicy\": {\n        \"policyGroup\": {\n          \"id\": \"OIDCPolicyDefault\"\n        },\n        \"grantAccessSessionRevocationApi\": false,\n        \"pingAccessLogoutCapable\": false,\n        \"pairwiseIdentifierUserType\": false\n      },\n      \"clientAuth\": {\n        \"type\": \"NONE\",\n        \"enforceReplayPrevention\": false\n      },\n      \"extendedParameters\": {\n    \t\"authNexp\": {\n        \t\"values\": [\n        \t\t\"Basic\"\n          ]\n        }\n      },\n      \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n      \"requireProofKeyForCodeExchange\": false,\n      \"requireSignedRequests\": false\n    }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
                "description": "This client can be used to issue tokens for several Ping Products (using Exclusive Scopes):\n\n* PD DirAPI (`pd:dir:access`)\n* PD Consent API (`pd:consents:unpriv` | `pd:consents:priv`)\n* PD Delegated Admin App (`urn:pingidentity:directory-delegated-admin`)\n* PF Dynamic Client Registration (`pf:client:reg`)"
              },
              "response": []
            },
            {
              "name": "Create OIDC Client (PingIntrospect)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "357f9987-ab1f-4e11-aea5-059c0dc4de65",
                    "exec": [
                      "pm.test(\"OIDC Client - PingIntrospect Created\", function () {",
                      "    pm.response.to.have.status(\"Created\");",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ffc65e2a-f6cc-4329-a3a7-2cd96c484899",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "X-XSRF-Header",
                    "type": "text",
                    "value": "pingfederate"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n      \"clientId\": \"PingIntrospect\",\n      \"enabled\": true,\n      \"redirectUris\": [],\n      \"grantTypes\": [\n        \"ACCESS_TOKEN_VALIDATION\"\n      ],\n      \"name\": \"Ping Introspect\",\n      \"description\": \"This client is used to Introspect and validate PF-issued access_tokens\",\n      \"logoUrl\": \"\",\n      \"refreshRolling\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationTime\": 0,\n      \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n      \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n      \"persistentGrantIdleTimeout\": 0,\n      \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n      \"bypassApprovalPage\": false,\n      \"restrictScopes\": false,\n      \"restrictedScopes\": [],\n      \"exclusiveScopes\": [],\n      \"restrictedResponseTypes\": [],\n      \"defaultAccessTokenManagerRef\": {\n        \"id\": \"jwtDefault\"\n      },\n      \"validateUsingAllEligibleAtms\": true,\n      \"oidcPolicy\": {\n        \"grantAccessSessionRevocationApi\": false,\n        \"pingAccessLogoutCapable\": false\n      },\n      \"clientAuth\": {\n        \"type\": \"SECRET\",\n        \"secret\": \"{{oauthSecret}}\",\n        \"enforceReplayPrevention\": false\n      },\n      \"extendedParameters\": {},\n      \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n      \"requireSignedRequests\": false\n    }"
                },
                "url": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients"
              },
              "response": []
            }
          ],
          "_postman_id": "680f59a5-a4b0-4f78-a13c-5f45e5f501bc",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "05e2283b-eb88-4797-ae2d-2e541f207b15",
      "description": "Calls to setup some basic use cases:\n\n* Creates AuthN Policy\n * Uses Extended Properties Selector to switch:\n  * Basic (HTML Form)\n  * Enhanced (HTML Form with LIP)\n  * MFA (HTML Form with LIP --> PingID)  \n\n* Adds SAML SP Connection (to HTTPBIN)\n\n* Adds OIDC Clients\n * `PingLogon` -- AuthZ Code \\ Implicit\n * `PingIntrospect` -- Token Validation",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "7f027b52-ca9d-4090-a518-9fa1d73ff03a",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b2ee03a5-58a7-4954-b60b-63a3e3ba50eb",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Test Use Cases",
      "item": [
        {
          "name": "Test SAML Connection (Basic)",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d23267c-44f2-45ac-9e86-c538560e2537",
                "exec": [
                  "const $ = cheerio.load(responseBody);",
                  "    ",
                  "pm.test(\"SAML Assertion created\", function () {",
                  "    pm.expect($(\"input[name='SAMLResponse']\").val()).to.not.be.empty; ",
                  "    console.log(\"SAML Assertion was created\", $(\"input[name='SAMLResponse']\").val());",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f725a011-0211-44ff-95fa-cbd3da7f8b69",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "pf.username",
                  "value": "user.0",
                  "type": "text"
                },
                {
                  "key": "pf.pass",
                  "value": "2FederateM0re",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{pfBaseURL}}/idp/startSSO.ping?PartnerSpId=Dummy-SAML",
              "host": [
                "{{pfBaseURL}}"
              ],
              "path": [
                "idp",
                "startSSO.ping"
              ],
              "query": [
                {
                  "key": "PartnerSpId",
                  "value": "Dummy-SAML"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test OIDC Token request",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bc6b5143-869c-4bb1-b81e-e5d4a03511ea",
                "exec": [
                  "pm.test(\"OIDC AuthZ Code returned\", function () {",
                  "    pm.response.to.have.status(302);",
                  "        var loc = pm.response.headers.get(\"location\");",
                  "        var authzCode = loc.substr(loc.search(\"code=\") + 5);",
                  "",
                  "        // Parse out the Code value",
                  "        pm.environment.set(\"authzCode\", authzCode);",
                  "        console.log(\"AuthZ Code:\", authzCode);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "d00a48e0-be10-4973-958b-ed9d1926d7ff",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "pf.username",
                  "value": "user.0",
                  "type": "text"
                },
                {
                  "key": "pf.pass",
                  "value": "2FederateM0re",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{pfBaseURL}}/as/authorization.oauth2?response_type=code&client_id=PingLogon&redirect_uri=https://change.me",
              "host": [
                "{{pfBaseURL}}"
              ],
              "path": [
                "as",
                "authorization.oauth2"
              ],
              "query": [
                {
                  "key": "response_type",
                  "value": "code"
                },
                {
                  "key": "client_id",
                  "value": "PingLogon"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://change.me"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Swap Code for Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dbee2997-28a8-42e5-ab46-915d74cada50",
                "exec": [
                  "pm.test(\"Access Token returned\", function () {",
                  "    ",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    pm.expect(jsonData.access_token).to.not.be.empty;",
                  "    console.log(\"Access Token:\", jsonData.access_token );",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "eafdac8f-c744-4b65-bc2b-73c23c36e9dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "basic",
              "basic": {
                "password": "",
                "username": "PingLogon"
              }
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{pfBaseURL}}/as/token.oauth2?grant_type=authorization_code&redirect_uri=https://change.me&code={{authzCode}}",
              "host": [
                "{{pfBaseURL}}"
              ],
              "path": [
                "as",
                "token.oauth2"
              ],
              "query": [
                {
                  "key": "grant_type",
                  "value": "authorization_code"
                },
                {
                  "key": "redirect_uri",
                  "value": "https://change.me"
                },
                {
                  "key": "code",
                  "value": "{{authzCode}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "95b9017c-2db9-4b1e-a9cb-99fa26813224",
      "description": "Test to see if the connections are up:\n\n* SAML Connection -- base64 encoded Assertion will be checked\n* OIDC -- Performs a OIDC Code flow and Token Swap (requires `--ignore-redirects`)\n\nNote: Minted tokens can be seen in the service log",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "e359e545-c9a4-4d03-9b49-d3d5faac809b",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "5aca5b7e-abbc-4ec0-9713-40468b9cb6c0",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "basic",
    "basic": {
      "password": "{{pingdirAdminPwd}}",
      "username": "{{pingdirAdmin}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "e2363da0-69cb-4aab-9eb0-8fcbf445be81",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "29568365-4865-498d-8d0b-3bfe35ddcafb",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "8219e2fb-31a1-43bd-82c4-0502f0b8d770",
      "key": "pfAdminURL",
      "value": "https://pingfederate:9999",
      "type": "string"
    }
  ]
}